KR_VOID 15 void
IDN 15 foo
L_ZAGRADA 15 (
KR_INT 15 int
IDN 15 x
ZAREZ 15 ,
KR_INT 15 int
IDN 15 c
ZAREZ 15 ,
KR_CHAR 15 char
IDN 15 h
D_ZAGRADA 15 )
TOCKAZAREZ 15 ;
KR_INT 17 int
IDN 17 f
L_ZAGRADA 17 (
KR_VOID 17 void
D_ZAGRADA 17 )
L_VIT_ZAGRADA 18 {
KR_RETURN 19 return
BROJ 19 0
TOCKAZAREZ 19 ;
D_VIT_ZAGRADA 20 }
KR_INT 22 int
IDN 22 x
OP_PRIDRUZI 22 =
BROJ 22 3
TOCKAZAREZ 22 ;
KR_INT 26 int
IDN 26 main
L_ZAGRADA 26 (
KR_VOID 26 void
D_ZAGRADA 26 )
L_VIT_ZAGRADA 27 {
KR_INT 28 int
IDN 28 a
OP_PRIDRUZI 28 =
BROJ 28 5
TOCKAZAREZ 28 ;
KR_CONST 29 const
KR_CHAR 29 char
IDN 29 c
OP_PRIDRUZI 29 =
ZNAK 29 'i'
TOCKAZAREZ 29 ;
KR_INT 30 int
IDN 30 niz
L_UGL_ZAGRADA 30 [
BROJ 30 3
D_UGL_ZAGRADA 30 ]
TOCKAZAREZ 30 ;
KR_VOID 31 void
IDN 31 foo
L_ZAGRADA 31 (
KR_INT 31 int
IDN 31 x
ZAREZ 31 ,
KR_INT 31 int
IDN 31 c
ZAREZ 31 ,
KR_CHAR 31 char
IDN 31 h
D_ZAGRADA 31 )
TOCKAZAREZ 31 ;
KR_INT 32 int
IDN 32 x
OP_PRIDRUZI 32 =
BROJ 32 5
TOCKAZAREZ 32 ;
KR_INT 33 int
IDN 33 y
OP_PRIDRUZI 33 =
IDN 33 x
PLUS 33 +
BROJ 33 1
TOCKAZAREZ 33 ;
IDN 34 a
OP_PRIDRUZI 34 =
IDN 34 a
PLUS 34 +
BROJ 34 3
TOCKAZAREZ 34 ;
KR_IF 36 if
L_ZAGRADA 36 (
IDN 36 a
OP_GT 36 >
BROJ 36 2
D_ZAGRADA 36 )
L_VIT_ZAGRADA 37 {
KR_INT 38 int
IDN 38 a
TOCKAZAREZ 38 ;
KR_INT 39 int
IDN 39 b
TOCKAZAREZ 39 ;
IDN 40 a
OP_PRIDRUZI 40 =
IDN 40 b
TOCKAZAREZ 40 ;
IDN 41 x
OP_PRIDRUZI 41 =
BROJ 41 4
TOCKAZAREZ 41 ;
D_VIT_ZAGRADA 42 }
KR_RETURN 43 return
IDN 43 f
L_ZAGRADA 43 (
D_ZAGRADA 43 )
TOCKAZAREZ 43 ;
D_VIT_ZAGRADA 44 }
KR_INT 46 int
IDN 46 fact
L_ZAGRADA 46 (
KR_INT 46 int
IDN 46 bzvz
D_ZAGRADA 46 )
TOCKAZAREZ 46 ;
KR_VOID 48 void
IDN 48 foo
L_ZAGRADA 48 (
KR_INT 48 int
IDN 48 x
ZAREZ 48 ,
KR_INT 48 int
IDN 48 c
ZAREZ 48 ,
KR_CHAR 48 char
IDN 48 h
D_ZAGRADA 48 )
L_VIT_ZAGRADA 49 {
KR_INT 50 int
IDN 50 i
OP_PRIDRUZI 50 =
IDN 50 fact
L_ZAGRADA 50 (
IDN 50 x
D_ZAGRADA 50 )
TOCKAZAREZ 50 ;
KR_INT 51 int
IDN 51 a
OP_PRIDRUZI 51 =
IDN 51 a
PLUS 51 +
BROJ 51 1
TOCKAZAREZ 51 ;
KR_VOID 52 void
IDN 52 foo3
L_ZAGRADA 52 (
KR_VOID 52 void
D_ZAGRADA 52 )
TOCKAZAREZ 52 ;
KR_INT 53 int
IDN 53 niz1
L_UGL_ZAGRADA 53 [
BROJ 53 5
D_UGL_ZAGRADA 53 ]
OP_PRIDRUZI 53 =
L_VIT_ZAGRADA 53 {
BROJ 53 1
ZAREZ 53 ,
BROJ 53 2
ZAREZ 53 ,
BROJ 53 3
D_VIT_ZAGRADA 53 }
TOCKAZAREZ 53 ;
KR_FOR 56 for
L_ZAGRADA 56 (
IDN 56 i
OP_PRIDRUZI 56 =
BROJ 56 0
TOCKAZAREZ 56 ;
IDN 56 i
OP_LT 56 <
BROJ 56 5
TOCKAZAREZ 56 ;
IDN 56 i
OP_INC 56 ++
D_ZAGRADA 56 )
KR_BREAK 57 break
TOCKAZAREZ 57 ;
KR_WHILE 58 while
L_ZAGRADA 58 (
BROJ 58 1
D_ZAGRADA 58 )
L_VIT_ZAGRADA 59 {
KR_BREAK 60 break
TOCKAZAREZ 60 ;
IDN 61 i
OP_PRIDRUZI 61 =
IDN 61 i
PLUS 61 +
BROJ 61 2
TOCKAZAREZ 61 ;
D_VIT_ZAGRADA 62 }
KR_RETURN 64 return
TOCKAZAREZ 64 ;
D_VIT_ZAGRADA 66 }
KR_CHAR 68 char
IDN 68 proba3
L_ZAGRADA 68 (
KR_VOID 68 void
D_ZAGRADA 68 )
L_VIT_ZAGRADA 69 {
IDN 70 x
OP_PRIDRUZI 70 =
BROJ 70 4
TOCKAZAREZ 70 ;
KR_IF 71 if
L_ZAGRADA 71 (
BROJ 71 0
D_ZAGRADA 71 )
L_VIT_ZAGRADA 72 {
IDN 73 x
OP_PRIDRUZI 73 =
BROJ 73 6
TOCKAZAREZ 73 ;
KR_RETURN 74 return
ZNAK 74 'a'
TOCKAZAREZ 74 ;
D_VIT_ZAGRADA 75 }
KR_ELSE 75 else
L_VIT_ZAGRADA 75 {
KR_RETURN 76 return
L_ZAGRADA 76 (
KR_CHAR 76 char
D_ZAGRADA 76 )
BROJ 76 97
TOCKAZAREZ 76 ;
D_VIT_ZAGRADA 78 }
D_VIT_ZAGRADA 79 }
KR_CHAR 81 char
IDN 81 proba
L_ZAGRADA 81 (
KR_VOID 81 void
D_ZAGRADA 81 )
L_VIT_ZAGRADA 82 {
KR_RETURN 83 return
L_ZAGRADA 83 (
KR_CHAR 83 char
D_ZAGRADA 83 )
BROJ 83 97
TOCKAZAREZ 83 ;
D_VIT_ZAGRADA 84 }
KR_INT 87 int
IDN 87 proba2
L_ZAGRADA 87 (
KR_VOID 87 void
D_ZAGRADA 87 )
L_VIT_ZAGRADA 88 {
KR_RETURN 90 return
ZNAK 90 'a'
TOCKAZAREZ 90 ;
D_VIT_ZAGRADA 91 }
KR_INT 93 int
IDN 93 fact
L_ZAGRADA 93 (
KR_INT 93 int
IDN 93 n
D_ZAGRADA 93 )
L_VIT_ZAGRADA 94 {
IDN 95 foo
L_ZAGRADA 95 (
BROJ 95 1
ZAREZ 95 ,
BROJ 95 2
ZAREZ 95 ,
ZNAK 95 'h'
D_ZAGRADA 95 )
TOCKAZAREZ 95 ;
KR_IF 96 if
L_ZAGRADA 96 (
IDN 96 n
OP_GT 96 >
BROJ 96 0
D_ZAGRADA 96 )
KR_RETURN 97 return
IDN 97 n
OP_PUTA 97 *
IDN 97 fact
L_ZAGRADA 97 (
IDN 97 n
MINUS 97 -
BROJ 97 1
D_ZAGRADA 97 )
TOCKAZAREZ 97 ;
KR_ELSE 98 else
KR_RETURN 99 return
BROJ 99 1
TOCKAZAREZ 99 ;
D_VIT_ZAGRADA 100 }
KR_VOID 102 void
IDN 102 foo3
L_ZAGRADA 102 (
KR_VOID 102 void
D_ZAGRADA 102 )
L_VIT_ZAGRADA 103 {
KR_INT 104 int
IDN 104 i
OP_PRIDRUZI 104 =
BROJ 104 8
TOCKAZAREZ 104 ;
KR_RETURN 106 return
TOCKAZAREZ 106 ;
D_VIT_ZAGRADA 107 }
KR_VOID 109 void
IDN 109 f2
L_ZAGRADA 109 (
KR_INT 109 int
IDN 109 x
ZAREZ 109 ,
KR_INT 109 int
IDN 109 a
L_UGL_ZAGRADA 109 [
D_UGL_ZAGRADA 109 ]
D_ZAGRADA 109 )
L_VIT_ZAGRADA 109 {
IDN 110 x
OP_PRIDRUZI 110 =
IDN 110 x
PLUS 110 +
BROJ 110 1
TOCKAZAREZ 110 ;
IDN 111 a
L_UGL_ZAGRADA 111 [
BROJ 111 0
D_UGL_ZAGRADA 111 ]
OP_PRIDRUZI 111 =
IDN 111 a
L_UGL_ZAGRADA 111 [
BROJ 111 0
D_UGL_ZAGRADA 111 ]
PLUS 111 +
BROJ 111 1
TOCKAZAREZ 111 ;
D_VIT_ZAGRADA 112 }
KR_INT 123 int
IDN 123 main2
L_ZAGRADA 123 (
KR_VOID 123 void
D_ZAGRADA 123 )
L_VIT_ZAGRADA 123 {
KR_INT 124 int
IDN 124 x
OP_PRIDRUZI 124 =
BROJ 124 2147483647
ZAREZ 124 ,
IDN 124 y
TOCKAZAREZ 124 ;
KR_INT 125 int
IDN 125 a
OP_PRIDRUZI 125 =
BROJ 125 2147483648
TOCKAZAREZ 125 ;
L_ZAGRADA 126 (
KR_INT 126 int
D_ZAGRADA 126 )
ZNAK 126 'a'
TOCKAZAREZ 126 ;
L_ZAGRADA 127 (
KR_CONST 127 const
KR_CHAR 127 char
D_ZAGRADA 127 )
IDN 127 x
TOCKAZAREZ 127 ;
L_ZAGRADA 128 (
KR_CONST 128 const
KR_INT 128 int
D_ZAGRADA 128 )
ZNAK 128 'a'
TOCKAZAREZ 128 ;
L_ZAGRADA 129 (
KR_CHAR 129 char
D_ZAGRADA 129 )
L_ZAGRADA 129 (
L_ZAGRADA 129 (
KR_CONST 129 const
KR_INT 129 int
D_ZAGRADA 129 )
BROJ 129 300
PLUS 129 +
L_ZAGRADA 129 (
KR_INT 129 int
D_ZAGRADA 129 )
ZNAK 129 'a'
D_ZAGRADA 129 )
TOCKAZAREZ 129 ;
L_ZAGRADA 130 (
KR_INT 130 int
D_ZAGRADA 130 )
L_ZAGRADA 130 (
KR_CHAR 130 char
D_ZAGRADA 130 )
L_ZAGRADA 130 (
KR_CONST 130 const
KR_INT 130 int
D_ZAGRADA 130 )
L_ZAGRADA 130 (
KR_CONST 130 const
KR_CHAR 130 char
D_ZAGRADA 130 )
L_ZAGRADA 130 (
IDN 130 x
PLUS 130 +
IDN 130 y
D_ZAGRADA 130 )
TOCKAZAREZ 130 ;
KR_RETURN 132 return
BROJ 132 0
TOCKAZAREZ 132 ;
D_VIT_ZAGRADA 133 }
