KR_VOID 1 void
IDN 1 foo
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
ZAREZ 1 ,
KR_INT 1 int
IDN 1 c
ZAREZ 1 ,
KR_CHAR 1 char
IDN 1 h
D_ZAGRADA 1 )
TOCKAZAREZ 1 ;
KR_INT 3 int
IDN 3 f
L_ZAGRADA 3 (
KR_VOID 3 void
D_ZAGRADA 3 )
L_VIT_ZAGRADA 4 {
KR_RETURN 5 return
BROJ 5 0
TOCKAZAREZ 5 ;
D_VIT_ZAGRADA 6 }
KR_INT 8 int
IDN 8 x
OP_PRIDRUZI 8 =
BROJ 8 3
TOCKAZAREZ 8 ;
KR_INT 11 int
IDN 11 main
L_ZAGRADA 11 (
KR_VOID 11 void
D_ZAGRADA 11 )
L_VIT_ZAGRADA 12 {
KR_INT 13 int
IDN 13 a
OP_PRIDRUZI 13 =
BROJ 13 5
TOCKAZAREZ 13 ;
KR_CONST 14 const
KR_CHAR 14 char
IDN 14 c
OP_PRIDRUZI 14 =
ZNAK 14 'i'
TOCKAZAREZ 14 ;
KR_INT 15 int
IDN 15 niz
L_UGL_ZAGRADA 15 [
BROJ 15 3
D_UGL_ZAGRADA 15 ]
TOCKAZAREZ 15 ;
KR_VOID 16 void
IDN 16 foo
L_ZAGRADA 16 (
KR_INT 16 int
IDN 16 x
ZAREZ 16 ,
KR_INT 16 int
IDN 16 c
ZAREZ 16 ,
KR_CHAR 16 char
IDN 16 h
D_ZAGRADA 16 )
TOCKAZAREZ 16 ;
KR_INT 17 int
IDN 17 x
OP_PRIDRUZI 17 =
BROJ 17 5
TOCKAZAREZ 17 ;
KR_INT 18 int
IDN 18 y
OP_PRIDRUZI 18 =
IDN 18 x
PLUS 18 +
BROJ 18 1
TOCKAZAREZ 18 ;
IDN 19 a
OP_PRIDRUZI 19 =
IDN 19 a
PLUS 19 +
BROJ 19 3
TOCKAZAREZ 19 ;
KR_IF 21 if
L_ZAGRADA 21 (
IDN 21 a
OP_GT 21 >
BROJ 21 2
D_ZAGRADA 21 )
L_VIT_ZAGRADA 22 {
KR_INT 23 int
IDN 23 a
TOCKAZAREZ 23 ;
KR_INT 24 int
IDN 24 b
TOCKAZAREZ 24 ;
IDN 25 a
OP_PRIDRUZI 25 =
IDN 25 b
TOCKAZAREZ 25 ;
IDN 26 x
OP_PRIDRUZI 26 =
BROJ 26 4
TOCKAZAREZ 26 ;
D_VIT_ZAGRADA 27 }
KR_RETURN 28 return
IDN 28 f
L_ZAGRADA 28 (
D_ZAGRADA 28 )
TOCKAZAREZ 28 ;
D_VIT_ZAGRADA 29 }
KR_INT 31 int
IDN 31 fact
L_ZAGRADA 31 (
KR_INT 31 int
IDN 31 bzvz
D_ZAGRADA 31 )
TOCKAZAREZ 31 ;
KR_VOID 33 void
IDN 33 foo
L_ZAGRADA 33 (
KR_INT 33 int
IDN 33 x
ZAREZ 33 ,
KR_INT 33 int
IDN 33 c
ZAREZ 33 ,
KR_CHAR 33 char
IDN 33 h
D_ZAGRADA 33 )
L_VIT_ZAGRADA 34 {
KR_INT 35 int
IDN 35 i
OP_PRIDRUZI 35 =
IDN 35 fact
L_ZAGRADA 35 (
IDN 35 x
D_ZAGRADA 35 )
TOCKAZAREZ 35 ;
KR_INT 36 int
IDN 36 a
OP_PRIDRUZI 36 =
IDN 36 a
PLUS 36 +
BROJ 36 1
TOCKAZAREZ 36 ;
KR_VOID 37 void
IDN 37 foo3
L_ZAGRADA 37 (
KR_VOID 37 void
D_ZAGRADA 37 )
TOCKAZAREZ 37 ;
KR_INT 38 int
IDN 38 niz1
L_UGL_ZAGRADA 38 [
BROJ 38 5
D_UGL_ZAGRADA 38 ]
OP_PRIDRUZI 38 =
L_VIT_ZAGRADA 38 {
BROJ 38 1
ZAREZ 38 ,
BROJ 38 2
ZAREZ 38 ,
BROJ 38 3
D_VIT_ZAGRADA 38 }
TOCKAZAREZ 38 ;
KR_FOR 41 for
L_ZAGRADA 41 (
IDN 41 i
OP_PRIDRUZI 41 =
BROJ 41 0
TOCKAZAREZ 41 ;
IDN 41 i
OP_LT 41 <
BROJ 41 5
TOCKAZAREZ 41 ;
IDN 41 i
OP_INC 41 ++
D_ZAGRADA 41 )
KR_BREAK 42 break
TOCKAZAREZ 42 ;
KR_WHILE 43 while
L_ZAGRADA 43 (
BROJ 43 1
D_ZAGRADA 43 )
L_VIT_ZAGRADA 44 {
KR_BREAK 45 break
TOCKAZAREZ 45 ;
IDN 46 i
OP_PRIDRUZI 46 =
IDN 46 i
PLUS 46 +
BROJ 46 2
TOCKAZAREZ 46 ;
D_VIT_ZAGRADA 47 }
KR_RETURN 50 return
TOCKAZAREZ 50 ;
D_VIT_ZAGRADA 52 }
KR_CHAR 54 char
IDN 54 proba3
L_ZAGRADA 54 (
KR_VOID 54 void
D_ZAGRADA 54 )
L_VIT_ZAGRADA 55 {
IDN 56 x
OP_PRIDRUZI 56 =
BROJ 56 4
TOCKAZAREZ 56 ;
KR_IF 57 if
L_ZAGRADA 57 (
BROJ 57 0
D_ZAGRADA 57 )
L_VIT_ZAGRADA 58 {
IDN 59 x
OP_PRIDRUZI 59 =
BROJ 59 6
TOCKAZAREZ 59 ;
KR_RETURN 60 return
ZNAK 60 'a'
TOCKAZAREZ 60 ;
D_VIT_ZAGRADA 61 }
KR_ELSE 61 else
L_VIT_ZAGRADA 61 {
KR_RETURN 62 return
L_ZAGRADA 62 (
KR_CHAR 62 char
D_ZAGRADA 62 )
BROJ 62 97
TOCKAZAREZ 62 ;
D_VIT_ZAGRADA 64 }
D_VIT_ZAGRADA 65 }
KR_CHAR 67 char
IDN 67 proba
L_ZAGRADA 67 (
KR_VOID 67 void
D_ZAGRADA 67 )
L_VIT_ZAGRADA 68 {
KR_RETURN 69 return
L_ZAGRADA 69 (
KR_CHAR 69 char
D_ZAGRADA 69 )
BROJ 69 97
TOCKAZAREZ 69 ;
D_VIT_ZAGRADA 70 }
KR_INT 73 int
IDN 73 proba2
L_ZAGRADA 73 (
KR_VOID 73 void
D_ZAGRADA 73 )
L_VIT_ZAGRADA 74 {
KR_RETURN 76 return
ZNAK 76 'a'
TOCKAZAREZ 76 ;
D_VIT_ZAGRADA 77 }
KR_INT 79 int
IDN 79 fact
L_ZAGRADA 79 (
KR_INT 79 int
IDN 79 n
D_ZAGRADA 79 )
L_VIT_ZAGRADA 80 {
IDN 81 foo
L_ZAGRADA 81 (
BROJ 81 1
ZAREZ 81 ,
BROJ 81 2
ZAREZ 81 ,
ZNAK 81 'h'
D_ZAGRADA 81 )
TOCKAZAREZ 81 ;
KR_IF 82 if
L_ZAGRADA 82 (
IDN 82 n
OP_GT 82 >
BROJ 82 0
D_ZAGRADA 82 )
KR_RETURN 83 return
IDN 83 n
OP_PUTA 83 *
IDN 83 fact
L_ZAGRADA 83 (
IDN 83 n
MINUS 83 -
BROJ 83 1
D_ZAGRADA 83 )
TOCKAZAREZ 83 ;
KR_ELSE 84 else
KR_RETURN 85 return
BROJ 85 1
TOCKAZAREZ 85 ;
D_VIT_ZAGRADA 86 }
KR_VOID 88 void
IDN 88 foo3
L_ZAGRADA 88 (
KR_VOID 88 void
D_ZAGRADA 88 )
L_VIT_ZAGRADA 89 {
KR_INT 90 int
IDN 90 i
OP_PRIDRUZI 90 =
BROJ 90 8
TOCKAZAREZ 90 ;
KR_RETURN 92 return
TOCKAZAREZ 92 ;
D_VIT_ZAGRADA 93 }
KR_VOID 95 void
IDN 95 f2
L_ZAGRADA 95 (
KR_INT 95 int
IDN 95 x
ZAREZ 95 ,
KR_INT 95 int
IDN 95 a
L_UGL_ZAGRADA 95 [
D_UGL_ZAGRADA 95 ]
D_ZAGRADA 95 )
L_VIT_ZAGRADA 95 {
IDN 96 x
OP_PRIDRUZI 96 =
IDN 96 x
PLUS 96 +
BROJ 96 1
TOCKAZAREZ 96 ;
IDN 97 a
L_UGL_ZAGRADA 97 [
BROJ 97 0
D_UGL_ZAGRADA 97 ]
OP_PRIDRUZI 97 =
IDN 97 a
L_UGL_ZAGRADA 97 [
BROJ 97 0
D_UGL_ZAGRADA 97 ]
PLUS 97 +
BROJ 97 1
TOCKAZAREZ 97 ;
D_VIT_ZAGRADA 98 }
KR_INT 101 int
IDN 101 f2
L_ZAGRADA 101 (
KR_INT 101 int
IDN 101 y
D_ZAGRADA 101 )
L_VIT_ZAGRADA 102 {
KR_RETURN 103 return
BROJ 103 5
TOCKAZAREZ 103 ;
D_VIT_ZAGRADA 104 }
KR_INT 110 int
IDN 110 main2
L_ZAGRADA 110 (
KR_VOID 110 void
D_ZAGRADA 110 )
L_VIT_ZAGRADA 110 {
KR_INT 111 int
IDN 111 x
OP_PRIDRUZI 111 =
BROJ 111 2147483647
ZAREZ 111 ,
IDN 111 y
TOCKAZAREZ 111 ;
L_ZAGRADA 113 (
KR_INT 113 int
D_ZAGRADA 113 )
ZNAK 113 'a'
TOCKAZAREZ 113 ;
L_ZAGRADA 114 (
KR_CONST 114 const
KR_CHAR 114 char
D_ZAGRADA 114 )
IDN 114 x
TOCKAZAREZ 114 ;
L_ZAGRADA 115 (
KR_CONST 115 const
KR_INT 115 int
D_ZAGRADA 115 )
ZNAK 115 'a'
TOCKAZAREZ 115 ;
L_ZAGRADA 116 (
KR_CHAR 116 char
D_ZAGRADA 116 )
L_ZAGRADA 116 (
L_ZAGRADA 116 (
KR_CONST 116 const
KR_INT 116 int
D_ZAGRADA 116 )
BROJ 116 300
PLUS 116 +
L_ZAGRADA 116 (
KR_INT 116 int
D_ZAGRADA 116 )
ZNAK 116 'a'
D_ZAGRADA 116 )
TOCKAZAREZ 116 ;
L_ZAGRADA 117 (
KR_INT 117 int
D_ZAGRADA 117 )
L_ZAGRADA 117 (
KR_CHAR 117 char
D_ZAGRADA 117 )
L_ZAGRADA 117 (
KR_CONST 117 const
KR_INT 117 int
D_ZAGRADA 117 )
L_ZAGRADA 117 (
KR_CONST 117 const
KR_CHAR 117 char
D_ZAGRADA 117 )
L_ZAGRADA 117 (
IDN 117 x
PLUS 117 +
IDN 117 y
D_ZAGRADA 117 )
TOCKAZAREZ 117 ;
KR_RETURN 119 return
BROJ 119 0
TOCKAZAREZ 119 ;
D_VIT_ZAGRADA 120 }
